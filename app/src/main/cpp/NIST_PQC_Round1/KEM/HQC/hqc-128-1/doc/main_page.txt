/*! \mainpage HQC: a Public-Key Encryption scheme
 *
 *  1. SUBMISSION OVERVIEW
 *  ----------------------
 *
 *  In order to fully understand this submission, one should note that HQC is a public-key encryption scheme submitted as a KEM for which NIST "standard conversion techniques" should be applied (see NIST FAQ#13). In addition, the aforementionned KEM is obtained by applying a conversion technique to a PKE. In order to avoid any confusion, we may refer to:
 *
 * - <b>HQC_PKE IND-CPA</b>: HQC PKE IND-CPA scheme due to \cite cryptoeprint:2016:1194.
 * - <b>HQC_KEM IND-CCA2</b>: HQC KEM IND-CCA2 scheme obtained by applying the transformation from \cite cryptoeprint:2017:604 to the HQC PKE IND-CPA scheme. It is the implementation provided.
 * - <b>HQC_PKE IND-CCA2</b>: HQC PKE IND-CCA2 scheme obtained by applying NIST "standard conversion techniques" to the HQC KEM IND-CCA2 scheme. It is the scheme submitted.<br />
 *
 * 
 * Six parameters sets denoted respectively HQC-basic-III, HQC-advanced-II, HQC-advanced-III, HQC-paranoiac-II, HQC-paranoiac-III and HQC-paranoiac-IV are provided as explained in the supporting documentation. Each parameter set folder is organized as follows:
 * 
 *  - <b>bin/</b>: Files generated during compilation
 *  - <b>doc/</b>: Technical documentation of the scheme
 *  - <b>lib/</b>: Third party libraries used 
 *  - <b>src/</b>: Source code of the scheme  
 *  - <b>doxygen.conf</b>: Documentation configuration file
 *  - <b>Makefile</b>: Makefile
 *  
 *  <br />
 *  
 *  2. INSTALLATION INSTRUCTIONS
 *  ----------------------------
 *  
 *  <h3>2.1 Requirements</h3>
 *
 *  The following softwares and libraries are required: <b>make</b>, <b>g++</b>, <b>ntl</b>, <b>gf2x</b>, <b>gmp</b> and <b>openssl</b>. NTL must be built with the gf2x library \cite gf2x, more details about how to do this are given here (https://www.shoup.net/ntl/doc/tour-gf2x.html).
 *
 *  <h3>2.2 Compilation Step</h3>
 *
 *  Let <b>X</b> denotes <b>-basic-III</b>, <b>-advanced-II</b>, <b>-advanced-III</b>, <b>-paranoiac-II</b>, <b>-paranoiac-III</b> or <b>-paranoiac-IV</b>  depending on the parameter set considered. HQC can be compiled in three differents ways:
 *  - Execute <b>make hqcX</b> to compile a working example of the scheme. Run <b>bin/hqcX</b> to execute all the steps of the scheme and display theirs respective performances.
 *  - Execute <b>make hqcX-kat</b> to compile the NIST KAT generator. Run <b>bin/hqcX-kat</b> to generate KAT files.
 *  - Execute <b>make hqcX-verbose</b> to compile a working example of the scheme in verbose mode. Run <b>bin/hqcX-verbose</b> to generate intermediate values.
 *
 *  During compilation, the following files are created inside the <b>bin/build</b> folder:
 *  - <b>hash.o</b>: A wrapper around openssl SHA512 implementation
 *  - <b>rng.o</b>: NIST rng
 *  - <b>parsing.o</b>: Functions to parse public key, secret key and ciphertext of the scheme.
 *  - <b>gf2x.o</b>: Function to multiply polynomials.
 *  - <b>vector.o</b>: Functions to manipulate vectors.
 *  - <b>bch.o</b>: Functions to encode and decode messages using BCH codes (either in normal mode or verbose mode).
 *  - <b>repetition.o</b>: Functions to encode and decode messages using repetition codes.
 *  - <b>tensor.o</b>: Functions to encode and decode messages using tensor codes (either in normal mode or verbose mode).
 *  - <b>hqc.o</b>: The HQC PKE IND-CPA scheme (either in normal mode or verbose mode).
 *  - <b>kem.o</b>: The HQC KEM IND-CCA2 scheme (either in normal mode or verbose mode).
 *
 * <br />
 *
 *  3. DOCUMENTATION 
 *  ----------------
 *
 *  <h3>3.1 Requirements</h3>
 *
 *  The following softwares are required: <b>doxygen</b> and <b>bibtex</b>.
 *
 *  <h3>3.2 Generation Step</h3>
 * 
 *  - Run <b>doxygen doxygen.conf</b> to generate the code documentation
 *  - Browse <b>doc/html/index.html</b> to read the documentation
 *
 * <br />
  *
 *  4. ADDITIONAL INFORMATIONS
 *  --------------------------
 *
 *  <h3>4.1 Implementation overview</h3>
 *
 *  The <b>HQC_KEM IND-CCA2</b> scheme is defined in the api.h and parameters.h files and implemented in kem.cpp.
 *  The latter is based on the <b>HQC_PKE IND-CPA</b> scheme that is defined in hqc.h and implemented in hqc.cpp.
 *  The <b>HQC_PKE IND-CPA</b> scheme uses Tensor codes (see tensor.h and tensor.cpp) which is the combination of two codes BCH codes (see bch.h and bch.cpp) 
 *  and Repetition codes (see repetition.h and repetition.cpp).
 *  The files gf2x.cpp and gf2x.h provide the function performing the multiplication of two polynomials using NTL \cite ntl with the gf2x library \cite gf2x.
 *  As public key, secret key and ciphertext can manipulated either with theirs mathematical representations or as bit strings, the files parsing.h and parsing.cpp provide functions to switch between these two representations.
 *  Finally, the files <b>hash.h</b>, <b>rng.h</b>, <b>hash.c</b> and <b>rng.c</b> (inside the <b>lib/</b> folder) contain respectively a wrapper around OpenSSL SHA512 implementation and the NIST random functions.  
 *
 *  <h3>4.2 Public key, secret key, ciphertext and shared secret</h3>
 *
 *  The public key, secret key and ciphertext are respectively composed of (<b>h</b>, <b>s</b>), (<b>x</b>, <b>y</b>) and (<b>u</b>, <b>v</b>, <b>d</b>).
 *  The shared secret is the output of the hash of <b>m</b>, <b>u</b> and <b>v</b> using SHA512.
 *  In order to shorten the keys, the public key is stored as (<b>seed1</b>, <b>s</b>) and the secret key is stored as (<b>seed2</b>).
 *  To this end, the seed expander provided by the NIST was used along with 40 bytes long seeds. 
 *
 */
